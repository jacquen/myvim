# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags,text = i.next().split(':', 1)

            if len(flags) == 0:
                if len(text) == 1:
                    rv.append((text,text,text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif flags[0] == 's' and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)

            elif flags[0] == 'b':
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))

    except StopIteration:
       return rv

def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """

    ft = vim.eval("&filetype")
    # check if the comment dict has the format for the current file
    if _commentDict.has_key(ft):
        return _commentDict[ft]

    # otherwise parse vim's comments and add it for later use
    commentformat = _parse_comments(vim.eval("&comments"))[0]
    _commentDict[ft] = commentformat

    return commentformat


def make_box(twidth, bwidth = None):
   if bwidth is None:
      bwidth = twidth + 2
   b,m,e,i = _get_comment_format()
   sline = b + m + bwidth*m + 2*m
   nspaces = (bwidth - twidth)//2
   mlines = i + m + " " + " "*nspaces
   mlinee = " " + " "*(bwidth-twidth-nspaces) + m
   eline = i + 2*m + bwidth*m + m + e
   return sline, mlines, mlinee, eline
endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
box = make_box(len(t[1]), 71)
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]), 71)
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
$0
endsnippet

snippet versicle "短诗 (用于预览排版效果)"
余辉 - 博尔赫斯

日落总是令人不安
无论它浮华富丽还是一贫如洗，
但尚且更加令人不安的
是最后那绝望的闪耀
它使原野生锈
此刻地平线上再也留不下
斜阳的喧嚣与自负。
要抓住这紧张而奇异的光是多么艰难，
那是个幻像，人类对黑暗的一致恐惧
把它强加在空间之上
它突然间停止
在我们觉察到它的虚假之时
就像一个梦破灭
在做梦者得知他正在做梦之时。
$0
endsnippet

snippet novel "小说节选 (用于预览排版效果)"
流星蝴蝶剑 - 古龙

流星的光芒虽短促，但天上还有什么星能比它更灿烂，辉煌。
当流星出现的时候，就算是永恒不变的星座，也夺不去它的光。
蝴蝶的生命是脆弱的甚至比鲜艳的花还脆弱。
可是它永远是活在春天里。
它美丽，它自由，它飞翔。
它的生命虽短促却芬芳。
只有剑，才比较接近永恒。
一个剑客的光芒与生命，往往就在他手里握着的剑上，但剑若也有情，它的光芒是否也就会变得和流星一样短促。
流星划过夜空的时候，他就躺在这块青石上。
他狂赌、酗酒。
他嫖，在他生命之中，曾经有过各式各样的女人。
他甚至杀人
但只有流星出现，他都很少错过，因为他总是躺在这里等，只能感觉到那种夺目的光芒，那种辉煌的刺激，就是他生命中最大的欢乐。
他不愿为了任何事错过这种机会，因为他生命中很少有别的欢乐。
他也曾想抓一颗流屋当然那也是很久以前的事了。现在他剩下的幻想也不多，几乎也完全没有回想。
对他这种人来说幻想不但可笑，而且是可耻。
这也就是世界上最接近流星的地方。
$0
endsnippet

# vim:ft=snippets:
