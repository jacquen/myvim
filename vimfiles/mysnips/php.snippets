snippet / "单行注释"
//  ${1}
endsnippet

snippet // "多行注释"
/* ${1}*/
endsnippet

snippet php "单行标签"
<?php ${1} ?>
endsnippet

snippet php. "跨行标签"
<?php
${1}
?>
endsnippet

snippet doc "跨行文本"
<<<${1:HEREDOC}
${2}
$1;${3}
endsnippet

snippet rq "require包含"
require "${1}";${2}
endsnippet

snippet rq. "只包含一次"
require_once "${1}";${2}
endsnippet

snippet in "include包含"
include "${1}";${2}
endsnippet

snippet in. "只包含一次"
include_once "${1}";${2}
endsnippet

snippet int "接口定义"
interface ${1:int_name}
{
    ${2}
}
endsnippet

snippet cl "类定义"
${1}class ${2:cl_name}
{
    ${3}
}
endsnippet

snippet cle "带继承的类定义"
${1}class ${2:cl_nameA} extends ${3:cl_nameB}
{
    ${4}
}
endsnippet

snippet cli "实现接口的类定义"
${1}class ${2:cl_name} implements ${3:cl_intName}
{
    ${4}
}
endsnippet

snippet clei "先继承后实现接口的类定义"
${1}class ${2:cl_nameA} extends ${3:cl_nameB} implements ${4:cl_intName}
{
    ${5}
}
endsnippet

snippet clie "先实现接口后继承的类定义"
${1}class ${2:cl_nameA} implements ${3:cl_intName} extends ${4:cl_nameB}
{
    ${5}
}
endsnippet

snippet f "函数定义"
${1}function ${2:f_name}(${3})
{
    ${4}
}
endsnippet

snippet fc "构造函数"
${1}function __construct(${2})
{
    ${3}
}
endsnippet

snippet fd "析构函数"
${1}function __destruct()
{
    ${2}
}
endsnippet

snippet fn "克隆函数"
${1}function __clone()
{
    ${2}
}
endsnippet

snippet fa "重载函数"
${1}function __call(${2:$method}, ${3})
{
    ${4}
}
endsnippet

snippet ft "将类当作字符串打印"
${1}function __toString(${2})
{
    ${3}
}
endsnippet

snippet fg "__get()"
${1}function __get(${2})
{
    ${3}
}
endsnippet

snippet fs "__set()"
${1}function __set(${2})
{
    ${3}
}
endsnippet

snippet fl "自动加载"
${1}function __autoload(${2})
{
    ${3}
}
endsnippet

snippet if "if"
if(${1}){
    ${2}
}
endsnippet

snippet elif "else" if
else if(${1}){
    ${2}
}
endsnippet

snippet el "else"
else{
    ${1}
}
endsnippet

snippet for "for"
for(${1}){
    ${2}
}
endsnippet

snippet fore "foreach"
foreach(${1}){
    ${2}
}
endsnippet

snippet wh "while"
    while(${1}){
        ${2}
    }
endsnippet

snippet do "do-while"
do{
    ${2}
} while(${1});
endsnippet

snippet sw "switch"
switch(${1}){
    ${2}
}
endsnippet

snippet cs "case"
case ${1}:
    ${2}
endsnippet

snippet df "default"
default:
    ${1}
endsnippet

snippet arr "数组"
array(${1});${2}
endsnippet

# 单个关键字
snippet ab "抽象类"
abstract ${1}
endsnippet

snippet pu "公共"
public ${1}
endsnippet

snippet po "保护"
protected ${1}
endsnippet

snippet pr "私有"
private ${1}
endsnippet

snippet fi "阻止继承和重载"
final ${1}
endsnippet

snippet pa "引用父类属性和方法"
parent::${1}
endsnippet

snippet cn "对象克隆"
clone ${1}
endsnippet

snippet gl "全局变量"
global ${1}
endsnippet

snippet st "静态变量"
static ${1}
endsnippet

snippet gt "跳转"
goto ${1}
endsnippet

snippet co "继续"
continue;${1}
endsnippet

snippet br "中断"
break;${1}
endsnippet

snippet re "返回"
return ${1};
endsnippet

snippet ex "结束"
exit;${1}
endsnippet

snippet ins "检查对象是否是指定类的实例"
instanceof ${1}
endsnippet

# 异常处理
snippet try "包围代码块"
try{
    ${1}
}
endsnippet

snippet cat "捕获异常"
catch(${1:Exception} $${2:e}){
    ${3}
}
endsnippet

snippet th "抛出异常"
throw new ${1:Exception}(${2});${3}
endsnippet

# 输入输出
snippet e "输出"
echo ${1};${2}
endsnippet

snippet p "输出"
print ${1};${2}
endsnippet

snippet pri "格式化输出"
printf("${1}\n"${2});${3}
endsnippet

snippet spr "格式化输出给一个字符串"
sprintf("${1}\n"${2});${3}
endsnippet

snippet . "$this"
$this->${1}
endsnippet

# 超全局变量
snippet glb
$GLOBALS["${1}"]${2}
endsnippet

snippet env "环境变量数组"
$_ENV["${1}"]${2}
endsnippet

snippet ser "服务器环境变量"
$_SERVER["${1}"]${2}
endsnippet

snippet cok "cookie变量数组"
$_COOKIE["${1}"]${2}
endsnippet

snippet ses "会话变量数组"
$_SESSION["${1}"]${2}
endsnippet

snippet get
$_GET["${1}"]${2}
endsnippet

snippet post
$_POST["${1}"]${2}
endsnippet

snippet req
$_REQUEST["${1}"]${2}
endsnippet

snippet file "与文件上传相关的变量数组"
$_FILES["${1}"]${2}
endsnippet

# 常用函数
snippet nuf "数值格式化"
number_format(${1});${2}
endsnippet

snippet def "定义常量"
define("${1}", ${2});${3}
endsnippet
